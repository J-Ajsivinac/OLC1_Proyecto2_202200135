/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,7],$V2=[1,12],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,25],$Vc=[1,24],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[9,21,26,42,43,45,46,47,48,49,51,54,55,56,57,58,59,60,61],$Vs=[9,21,26,42,43,51,60,61],$Vt=[9,21,26,42,43,45,46,51,54,55,56,57,58,59,60,61],$Vu=[9,21,26,42,43,51,54,55,60,61],$Vv=[9,21,26,42,43,51,54,55,56,57,58,59,60,61],$Vw=[21,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"TK_execute":7,"EXPRESSION":8,"TK_semicolon":9,"EXECUTE_STATEMENT":10,"FUNCTION_CALL":11,"DECLARATION":12,"TK_types":13,"IDS":14,"TK_asign":15,"PRINT":16,"TK_cout":17,"TK_double_less":18,"Tk_cout":19,"TK_endl":20,"TK_comma":21,"TK_id":22,"ASSIGNMENT":23,"ARRAY_NEW":24,"TK_lbracket":25,"TK_rbracket":26,"TK_new":27,"ARRAY_BRACKETS":28,"ASIGN_ARRAY":29,"VALUES_ARRAY":30,"VALUE_ARRAY":31,"TK_integer":32,"TK_double":33,"TK_char":34,"TK_string":35,"TK_true":36,"TK_false":37,"ARRAY_ASSIGNMENT":38,"ARITHMETICS":39,"LOGICAL_EXPRESSION":40,"CASTING":41,"TK_question":42,"TK_colon":43,"INCRE_AND_DECRE":44,"TK_plus":45,"TK_minus":46,"TK_mul":47,"TK_div":48,"TK_mod":49,"TK_lparen":50,"TK_rparen":51,"POW":52,"TK_pow":53,"TK_equal":54,"TK_notequal":55,"TK_less":56,"TK_greater":57,"TK_less_equal":58,"TK_greater_equal":59,"TK_and":60,"TK_or":61,"TK_not":62,"IF":63,"TK_if":64,"BLOCK":65,"TK_else":66,"TK_lbrace":67,"TK_rbrace":68,"LOOP":69,"TK_while":70,"TK_do":71,"TK_for":72,"FOR_LOOP":73,"ID_FOR":74,"UPDATE":75,"TK_incr":76,"TK_decr":77,"SWITCH":78,"TK_switch":79,"CASES_BLOCK":80,"CASES":81,"DEFAULT":82,"CASE":83,"TK_case":84,"TK_default":85,"RETURN":86,"TK_return":87,"FUNCTION":88,"PARAMETERS":89,"TK_void":90,"PARAMETER":91,"PARAMETERS_CALL":92,"NATIVE_FUNCTIONS":93,"TK_tolower":94,"TK_toupper":95,"TK_length":96,"TK_round":97,"TK_typeof":98,"TK_tostring":99,"TK_c_str":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TK_execute",9:"TK_semicolon",13:"TK_types",15:"TK_asign",17:"TK_cout",18:"TK_double_less",19:"Tk_cout",20:"TK_endl",21:"TK_comma",22:"TK_id",25:"TK_lbracket",26:"TK_rbracket",27:"TK_new",32:"TK_integer",33:"TK_double",34:"TK_char",35:"TK_string",36:"TK_true",37:"TK_false",42:"TK_question",43:"TK_colon",45:"TK_plus",46:"TK_minus",47:"TK_mul",48:"TK_div",49:"TK_mod",50:"TK_lparen",51:"TK_rparen",53:"TK_pow",54:"TK_equal",55:"TK_notequal",56:"TK_less",57:"TK_greater",58:"TK_less_equal",59:"TK_greater_equal",60:"TK_and",61:"TK_or",62:"TK_not",64:"TK_if",66:"TK_else",67:"TK_lbrace",68:"TK_rbrace",70:"TK_while",71:"TK_do",72:"TK_for",76:"TK_incr",77:"TK_decr",79:"TK_switch",84:"TK_case",85:"TK_default",87:"TK_return",90:"TK_void",94:"TK_tolower",95:"TK_toupper",96:"TK_length",97:"TK_round",98:"TK_typeof",99:"TK_tostring",100:"TK_c_str"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,3],[10,3],[12,5],[12,3],[16,3],[16,4],[14,3],[14,1],[23,3],[24,8],[24,11],[24,6],[24,8],[29,3],[28,3],[30,3],[30,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[38,6],[38,9],[8,1],[8,1],[8,1],[8,5],[8,4],[8,7],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,1],[52,6],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[41,4],[63,5],[63,7],[63,7],[65,3],[65,2],[69,5],[69,6],[69,5],[73,5],[74,4],[74,1],[75,1],[75,1],[44,2],[44,2],[78,7],[80,2],[80,1],[80,1],[81,2],[81,1],[83,4],[83,3],[82,3],[82,2],[86,2],[86,1],[88,6],[88,5],[88,6],[88,5],[89,3],[89,1],[91,2],[11,4],[11,3],[92,3],[92,1],[93,4],[93,4],[93,4],[93,4],[93,4],[93,4],[93,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3:
 this.$.push($$[$0])
break;
case 4:
 this.$ = [$$[$0]];
break;
case 5:
 this.$ =  $$[$0-1];
break;
case 31: case 53:
this.$ = $$[$0]
break;
case 40:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.INT) 
break;
case 41:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.DOUBLE) 
break;
case 42:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.CHAR) 
break;
case 43:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.STRING) 
break;
case 44: case 45:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.BOOLEAN) 
break;
case 46: case 47: case 48: case 49: case 50:
this.$ = new Arithmetic(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0-1],$$[$0])
break;
case 51:
this.$ = new Arithmetic(_$[$0-1].first_line,_$[$0-1].first_column,undefined,$$[$0-1],$$[$0])
break;
case 52:
this.$ = $$[$0-1]
break;
case 54:
this.$ = new Arithmetic(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],"^",$$[$0-1])
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:$V0},{1:[3]},{5:[1,6],6:7,7:$V0},{1:[2,2]},o($V1,[2,4]),{8:8,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{1:[2,1]},o($V1,[2,3]),{9:[1,26],42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vr,[2,31]),o($Vr,[2,32]),o($Vr,[2,33]),o($Vr,[2,39],{25:[1,41],50:[1,42],76:[1,43],77:[1,44]}),o($Vr,[2,37]),o($Vr,[2,38]),o($Vr,[2,40]),o($Vr,[2,41]),o($Vr,[2,42]),o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),{8:45,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:46,11:13,13:[1,47],22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},o($Vr,[2,53]),{8:48,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{50:[1,49]},o($V1,[2,5]),{8:50,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:51,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:52,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:53,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:54,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:55,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:56,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:57,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:58,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:59,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:60,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:61,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:62,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:63,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:64,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{8:67,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,51:[1,66],52:23,53:$Vb,62:$Vc,92:65},o($Vr,[2,78]),o($Vr,[2,79]),o($Vr,[2,51]),{42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,51:[1,68],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{51:[1,69]},o($Vs,[2,63],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),{8:70,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{42:$Vd,43:[1,71],45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vt,[2,46],{47:$Vg,48:$Vh,49:$Vi}),o($Vt,[2,47],{47:$Vg,48:$Vh,49:$Vi}),o($Vr,[2,48]),o($Vr,[2,49]),o($Vr,[2,50]),o($Vu,[2,55],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($Vu,[2,56],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($Vv,[2,57],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi}),o($Vv,[2,58],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi}),o($Vv,[2,59],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi}),o($Vv,[2,60],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi}),o($Vs,[2,61],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o([9,21,26,42,43,51,61],[2,62],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp}),{26:[1,72],42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{21:[1,74],51:[1,73]},o($Vr,[2,100]),o($Vw,[2,102],{42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),o($Vr,[2,52]),{8:75,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},{21:[1,76],42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{8:77,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},o($Vr,[2,35],{25:[1,78]}),o($Vr,[2,99]),{8:79,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},o($Vr,[2,64]),{8:80,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},o([9,21,26,42,43,51],[2,34],{45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),{8:81,11:13,22:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:9,40:10,41:11,44:14,46:$V9,50:$Va,52:23,53:$Vb,62:$Vc},o($Vw,[2,101],{42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),{42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,51:[1,82],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{26:[1,83],42:$Vd,45:$Ve,46:$Vf,47:$Vg,48:$Vh,49:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vr,[2,54]),o($Vr,[2,36])],
defaultActions: {3:[2,2],6:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías

const {Types} = require('../Classes/Utils/Types')

//Expresiones
const {Primitive} = require('../Classes/Expressions/Primitive')
const {Arithmetic} = require('../Classes/Expressions/Arithmetic')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1://ignora saltos de línea
break;
case 2://ignora tabulaciones
break;
case 3:
break;
case 4:
break;
case 5:return 90;
break;
case 6:return 20;
break;
case 7:return 53;
break;
case 8:return 64;
break;
case 9:return 66;
break;
case 10:return 70;
break;
case 11:return 72;
break;
case 12:return 71;
break;
case 13:return 87;
break;
case 14:return 'TK_break';
break;
case 15:return 'TK_continue';
break;
case 16:return 79;
break;
case 17:return 84;
break;
case 18:return 85;
break;
case 19:return 17;
break;
case 20:return 27;
break;
case 21:return 94;
break;
case 22:return 95;
break;
case 23:return 96;
break;
case 24:return 97;
break;
case 25:return 98;
break;
case 26:return 99;
break;
case 27:return 100;
break;
case 28:return 36;
break;
case 29:return 37;
break;
case 30:return 7;
break;
case 31:return 45;
break;
case 32:return 46;
break;
case 33:return 47;
break;
case 34:return 48;
break;
case 35:return 9;
break;
case 36:return 49;
break;
case 37:return 21;
break;
case 38:return 50;
break;
case 39:return 51;
break;
case 40:return 'TL_lbrace';
break;
case 41:return 68;
break;
case 42:return 25;
break;
case 43:return 26;
break;
case 44:return 42;
break;
case 45:return 15;
break;
case 46:return 54;
break;
case 47:return 55;
break;
case 48:return 18;
break;
case 49:return 56;
break;
case 50:return 57;
break;
case 51:return 58;
break;
case 52:return 59;
break;
case 53:return 60;
break;
case 54:return 61;
break;
case 55:return 62;
break;
case 56:return 76;
break;
case 57:return 77;
break;
case 58:return 33;
break;
case 59:return 32;
break;
case 60:return 22;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 35; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34; 
break;
case 63:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\n)/i,/^(?:[\r\t]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:void\b)/i,/^(?:<<endl\b)/i,/^(?:pow\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:execute\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:%)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"(([^\n\"\\]?|\\.))*")/i,/^(?:'(([^\n\"\\]?|\\.))')/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}