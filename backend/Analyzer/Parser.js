/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,21],$V3=[1,22],$V4=[1,24],$V5=[1,23],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[5,18,19,24,25,29,33,70,74,75,76,77,83,90,92,95,96,97,98,99,100,101],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,64],$Vq=[1,71],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,84],$VA=[1,83],$VB=[10,27,32],$VC=[10,30,32,35,44,45,52,53,54,55,56,58,61,62,63,64,65,66,67,68],$VD=[1,117],$VE=[1,118],$VF=[1,119],$VG=[1,120],$VH=[1,121],$VI=[1,122],$VJ=[1,123],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,151],$VS=[32,58],$VT=[5,18,19,24,25,29,33,70,72,74,75,76,77,83,88,89,90,92,95,96,97,98,99,100,101],$VU=[10,30,32,35,44,45,58,67,68],$VV=[1,196],$VW=[10,30,32,35,44,45,52,53,58,61,62,63,64,65,66,67,68],$VX=[10,30,32,35,44,45,58,61,62,67,68],$VY=[10,30,32,35,44,45,58,61,62,63,64,65,66,67,68],$VZ=[1,218],$V_=[1,233],$V$=[1,232],$V01=[74,88,89],$V11=[1,259],$V21=[32,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"EXECUTE_STATEMENT":7,"DECLARATION":8,"ARRAY_NEW":9,"TK_semicolon":10,"ARRAY_ASSIGNMENT":11,"ASSIGNMENT":12,"PRINT":13,"IF":14,"LOOP":15,"SWITCH":16,"RETURN":17,"TK_break":18,"TK_continue":19,"FUNCTION":20,"FUNCTION_CALL":21,"INCRE_AND_DECRE":22,"NATIVE_FUNCTIONS":23,"TK_execute":24,"TK_types":25,"IDS":26,"TK_asign":27,"EXPRESSION":28,"TK_cout":29,"TK_double_less":30,"TK_endl":31,"TK_comma":32,"TK_id":33,"TK_lbracket":34,"TK_rbracket":35,"TK_new":36,"ARRAY_BRACKETS":37,"ASIGN_ARRAY":38,"VALUES_ARRAY":39,"VALUE_ARRAY":40,"ARITHMETICS":41,"LOGICAL_EXPRESSION":42,"CASTING":43,"TK_question":44,"TK_colon":45,"TK_integer":46,"TK_double":47,"TK_char":48,"TK_string":49,"TK_true":50,"TK_false":51,"TK_plus":52,"TK_minus":53,"TK_mul":54,"TK_div":55,"TK_mod":56,"TK_lparen":57,"TK_rparen":58,"POW":59,"TK_pow":60,"TK_equal":61,"TK_notequal":62,"TK_less":63,"TK_greater":64,"TK_less_equal":65,"TK_greater_equal":66,"TK_and":67,"TK_or":68,"TK_not":69,"TK_if":70,"BLOCK":71,"TK_else":72,"TK_lbrace":73,"TK_rbrace":74,"TK_while":75,"TK_do":76,"TK_for":77,"FOR_LOOP":78,"ID_FOR":79,"UPDATE":80,"TK_incr":81,"TK_decr":82,"TK_switch":83,"CASES_BLOCK":84,"CASES":85,"DEFAULT":86,"CASE":87,"TK_case":88,"TK_default":89,"TK_return":90,"PARAMETERS":91,"TK_void":92,"PARAMETER":93,"PARAMETERS_CALL":94,"TK_tolower":95,"TK_toupper":96,"TK_length":97,"TK_round":98,"TK_typeof":99,"TK_tostring":100,"TK_c_str":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"TK_semicolon",18:"TK_break",19:"TK_continue",24:"TK_execute",25:"TK_types",27:"TK_asign",29:"TK_cout",30:"TK_double_less",31:"TK_endl",32:"TK_comma",33:"TK_id",34:"TK_lbracket",35:"TK_rbracket",36:"TK_new",44:"TK_question",45:"TK_colon",46:"TK_integer",47:"TK_double",48:"TK_char",49:"TK_string",50:"TK_true",51:"TK_false",52:"TK_plus",53:"TK_minus",54:"TK_mul",55:"TK_div",56:"TK_mod",57:"TK_lparen",58:"TK_rparen",60:"TK_pow",61:"TK_equal",62:"TK_notequal",63:"TK_less",64:"TK_greater",65:"TK_less_equal",66:"TK_greater_equal",67:"TK_and",68:"TK_or",69:"TK_not",70:"TK_if",72:"TK_else",73:"TK_lbrace",74:"TK_rbrace",75:"TK_while",76:"TK_do",77:"TK_for",81:"TK_incr",82:"TK_decr",83:"TK_switch",88:"TK_case",89:"TK_default",90:"TK_return",92:"TK_void",95:"TK_tolower",96:"TK_toupper",97:"TK_length",98:"TK_round",99:"TK_typeof",100:"TK_tostring",101:"TK_c_str"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[7,3],[8,5],[8,3],[13,3],[13,5],[26,3],[26,1],[12,3],[9,8],[9,11],[9,6],[9,8],[38,3],[37,3],[39,3],[39,1],[40,1],[40,1],[11,6],[11,9],[28,1],[28,1],[28,1],[28,5],[28,4],[28,7],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,3],[41,1],[59,6],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,2],[43,4],[14,5],[14,7],[14,7],[71,3],[71,2],[15,5],[15,6],[15,5],[78,5],[79,4],[79,1],[80,1],[80,1],[22,2],[22,2],[16,7],[84,2],[84,1],[84,1],[85,2],[85,1],[87,4],[87,3],[86,3],[86,2],[17,2],[17,1],[20,6],[20,5],[20,6],[20,5],[91,3],[91,1],[93,2],[21,4],[21,3],[94,3],[94,1],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3:
 this.$.push($$[$0])
break;
case 4:
 this.$ = [$$[$0]];
break;
case 6: case 11: case 12: case 48: case 86: case 87:
this.$=$$[$0]
break;
case 7: case 9: case 10:
this.$=$$[$0-1]
break;
case 22:
this.$ = new InitID(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-4],$$[$0-3],$$[$0-1])
break;
case 24:
this.$=new Print(_$[$0-2].first_line,_$[$0-2].first_column, $$[$0], false)
break;
case 25:
this.$=new Print(_$[$0-4].first_line,_$[$0-4].first_column, $$[$0-2], true)
break;
case 26: case 35:
this.$.push($$[$0])
break;
case 27:
this.$ = [$$[$0]]; 
break;
case 28:
this.$ = new AsignID(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0])
break;
case 29:
this.$ = new InitArray(_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-6],$$[$0-7],$$[$0],undefined)
break;
case 30:
this.$ = new InitMatrix(_$[$0-10].first_line, _$[$0-10].first_column,$$[$0-9],$$[$0-10],$$[$0-1],$$[$0],undefined)
break;
case 31:
this.$ = new InitArray(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-5],undefined,$$[$0])
break;
case 32:
this.$ = new InitMatrix(_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-6],$$[$0-7],undefined,undefined,$$[$0])
break;
case 33: case 34: case 62:
this.$ = $$[$0-1]
break;
case 36:
this.$ = [$$[$0]]
break;
case 37: case 38: case 41: case 42: case 43: case 63: case 85:
this.$ = $$[$0]
break;
case 44:
this.$ = new Ternary(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-4],$$[$0-2],$$[$0])
break;
case 49:
this.$ = new AccessID(_$[$0].first_line,_$[$0].first_column,$$[$0])
break;
case 50:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.INT) 
break;
case 51:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.DOUBLE) 
break;
case 52:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.CHAR) 
break;
case 53:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.STRING) 
break;
case 54: case 55:
 this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0],Types.BOOLEAN) 
break;
case 56: case 57: case 58: case 59: case 60:
this.$ = new Arithmetic(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0-1],$$[$0])
break;
case 61:
this.$ = new Arithmetic(_$[$0-1].first_line,_$[$0-1].first_column,undefined,$$[$0-1],$$[$0])
break;
case 64:
this.$ = new Arithmetic(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],"^",$$[$0-1])
break;
case 65: case 66: case 67: case 68: case 69: case 70:
this.$ = new Relational(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0-1],$$[$0])
break;
case 71: case 72:
this.$ = new Logic(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0-1],$$[$0])
break;
case 73:
this.$ = new Logic(_$[$0-1].first_line,_$[$0-1].first_column,undefined,$$[$0-1],$$[$0])
break;
case 74:
this.$ = new Cast(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0])
break;
case 75:
this.$ = new If(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0], undefined)
break;
case 76: case 77:
this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2], $$[$0])
break;
case 78:
this.$ = new Block(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1])
break;
case 79:
this.$ = new Block(_$[$0-1].first_line, _$[$0-1].first_column,[])
break;
case 80:
this.$ = new While(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0])
break;
case 81:
this.$ = new DoWhile(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-1],$$[$0-4])
break;
case 82:
this.$ = new For(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2][0],$$[$0-2][1],$$[$0-2][2],$$[$0])
break;
case 83:
this.$ = [$$[$0-4],$$[$0-2],$$[$0]]
break;
case 84:
this.$ = new InitID(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-3],$$[$0-2],$$[$0])
break;
case 88: case 89:
this.$ = new IncrDecr(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0])
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:19,23:20,24:$V2,25:$V3,29:$V4,33:$V5,70:$V6,75:$V7,76:$V8,77:$V9,83:$Va,90:$Vb,92:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj},{1:[3]},{5:[1,39],6:40,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:19,23:20,24:$V2,25:$V3,29:$V4,33:$V5,70:$V6,75:$V7,76:$V8,77:$V9,83:$Va,90:$Vb,92:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj},{1:[2,2]},o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),{10:[1,41]},{10:[1,42]},{10:[1,43]},{10:[1,44]},o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),{10:[1,45]},{10:[1,46]},{10:[1,47]},o($Vk,[2,17]),{10:[1,48]},{10:[1,49]},{10:[1,50]},{21:51,33:[1,52]},{26:53,33:[1,54]},{27:$Vl,34:[1,55],57:$Vm,81:$Vn,82:$Vo},{30:[1,60]},{57:[1,61]},{57:[1,62]},{71:63,73:$Vp},{57:[1,65]},{57:[1,66]},{10:[2,101],21:72,22:73,28:67,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{33:[1,85]},{57:[1,86]},{57:[1,87]},{57:[1,88]},{57:[1,89]},{57:[1,90]},{57:[1,91]},{57:[1,92]},{1:[2,1]},o($Vk,[2,3]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{10:[1,93]},{57:$Vm},{10:[1,95],27:[1,94],32:[1,96]},o($VB,[2,27],{34:[1,97],57:[1,98]}),{21:72,22:73,25:[1,99],28:100,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:101,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:104,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,58:[1,103],59:82,60:$Vz,69:$VA,94:102},o($VC,[2,88]),o($VC,[2,89]),{21:72,22:73,28:105,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:106,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:107,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{75:[1,108]},{4:109,6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:19,23:20,24:$V2,25:$V3,29:$V4,33:$V5,70:$V6,74:[1,110],75:$V7,76:$V8,77:$V9,83:$Va,90:$Vb,92:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj},{12:114,25:[1,113],33:[1,115],78:111,79:112},{21:72,22:73,28:116,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{10:[2,100],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),o($VC,[2,49],{34:[1,131],57:$Vm,81:$Vn,82:$Vo}),o($VC,[2,47]),o($VC,[2,48]),o($VC,[2,50]),o($VC,[2,51]),o($VC,[2,52]),o($VC,[2,53]),o($VC,[2,54]),o($VC,[2,55]),{21:72,22:73,28:132,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,25:[1,134],28:133,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($VC,[2,63]),{21:72,22:73,28:135,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{57:[1,136]},{57:[1,137]},{21:72,22:73,28:138,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:139,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:140,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:141,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:142,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:143,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:144,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($Vk,[2,21]),{21:72,22:73,28:145,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($Vk,[2,23]),{33:[1,146]},{35:[1,147]},{25:$VR,58:[1,149],91:148,93:150},{35:[1,152]},{35:[1,153],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o([10,58],[2,28],{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ}),{32:[1,155],58:[1,154]},o($VC,[2,110]),o($VS,[2,112],{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ}),{10:[2,24],30:[1,156],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,157],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,158],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{57:[1,159]},{6:40,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:19,23:20,24:$V2,25:$V3,29:$V4,33:$V5,70:$V6,74:[1,160],75:$V7,76:$V8,77:$V9,83:$Va,90:$Vb,92:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj},o($VT,[2,79]),{58:[1,161]},{10:[1,162]},{33:[1,163]},{10:[2,85]},{27:$Vl},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,164],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{21:72,22:73,28:165,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:166,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:167,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:168,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:169,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:170,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:171,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:172,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:173,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:174,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:175,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:176,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:177,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:178,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:179,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($VC,[2,61]),{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,180],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{58:[1,181]},o($VU,[2,73],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO}),{21:72,22:73,28:182,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{25:$VR,58:[1,184],91:183,93:150},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,185],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,186],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,187],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,188],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,189],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,190],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,191],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{10:[1,192],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($VB,[2,26]),{27:[1,193],34:[1,194]},{32:$VV,58:[1,195]},{71:197,73:$Vp},o($VS,[2,107]),{33:[1,198]},{27:[1,199]},{34:[1,200]},o($VC,[2,109]),{21:72,22:73,28:201,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{31:[1,202]},{71:203,73:$Vp},{71:204,73:$Vp},{21:72,22:73,28:205,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($VT,[2,78]),{71:206,73:$Vp},{21:72,22:73,28:207,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{27:[1,208]},{73:[1,209]},{44:$VD,45:[1,210],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($VW,[2,56],{54:$VG,55:$VH,56:$VI}),o($VW,[2,57],{54:$VG,55:$VH,56:$VI}),o($VC,[2,58]),o($VC,[2,59]),o($VC,[2,60]),o($VX,[2,65],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,63:$VL,64:$VM,65:$VN,66:$VO}),o($VX,[2,66],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,63:$VL,64:$VM,65:$VN,66:$VO}),o($VY,[2,67],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI}),o($VY,[2,68],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI}),o($VY,[2,69],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI}),o($VY,[2,70],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI}),o($VU,[2,71],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO}),o([10,30,32,35,44,45,58,68],[2,72],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP}),{35:[1,211],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($VC,[2,62]),{21:72,22:73,28:212,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{32:[1,213],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{32:$VV,58:[1,214]},{71:215,73:$Vp},{10:[2,113]},{10:[2,114]},{10:[2,115]},{10:[2,116]},{10:[2,117]},{10:[2,118]},{10:[2,119]},o($Vk,[2,22]),{34:$VZ,36:[1,216],38:217},{35:[1,219]},{71:220,73:$Vp},{25:$VR,93:221},o($Vk,[2,103]),o($VS,[2,108]),{21:72,22:73,28:222,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{21:72,22:73,28:223,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($VS,[2,111],{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ}),{10:[2,25]},o($Vk,[2,75],{72:[1,224]}),o($Vk,[2,80]),{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,225],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($Vk,[2,82]),{10:[1,226],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{21:72,22:73,28:227,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{84:228,85:229,86:230,87:231,88:$V_,89:$V$},{21:72,22:73,28:234,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o($VC,[2,45],{34:[1,235]}),o($VC,[2,74]),{21:72,22:73,28:236,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{71:237,73:$Vp},o($Vk,[2,105]),{25:[1,238]},{10:[2,31]},{21:72,22:73,28:241,33:$Vq,34:$VZ,38:242,39:239,40:240,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{27:[1,243]},o($Vk,[2,102]),o($VS,[2,106]),{10:[2,39],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{35:[1,244],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{14:246,70:$V6,71:245,73:$Vp},o($Vk,[2,81]),{12:249,22:248,33:[1,250],80:247},{10:[2,84],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{74:[1,251]},{74:[2,92],86:252,87:253,88:$V_,89:$V$},{74:[2,93]},o($V01,[2,95]),{45:[1,254]},{21:72,22:73,28:255,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o([10,30,32,35,44,45,58],[2,44],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ}),{21:72,22:73,28:256,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,58:[1,257],61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($Vk,[2,104]),{34:$V11,37:258},{32:[1,261],35:[1,260]},o($V21,[2,36]),o($V21,[2,37],{44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ}),o($V21,[2,38]),{34:$VZ,36:[1,262],38:263},{27:[1,264]},o($Vk,[2,76]),o($Vk,[2,77]),{58:[2,83]},{58:[2,86]},{58:[2,87]},{27:$Vl,81:$Vn,82:$Vo},o($Vk,[2,90]),{74:[2,91]},o($V01,[2,94]),{71:265,73:$Vp,74:[2,99]},{44:$VD,45:[1,266],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},{35:[1,267],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($VC,[2,64]),{10:[2,29]},{21:72,22:73,28:268,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},o([10,32,35],[2,33]),{21:72,22:73,28:241,33:$Vq,34:$VZ,38:242,40:269,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{25:[1,270]},{10:[2,32]},{21:72,22:73,28:271,33:$Vq,41:68,42:69,43:70,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,53:$Vx,57:$Vy,59:82,60:$Vz,69:$VA},{74:[2,98]},o($V01,[2,97],{71:272,73:$Vp}),o($VC,[2,46]),{35:[1,273],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($V21,[2,35]),{34:$V11,37:274},{10:[2,40],44:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP,68:$VQ},o($V01,[2,96]),o([10,34],[2,34]),{34:$V11,37:275},{10:[2,30]}],
defaultActions: {3:[2,2],39:[2,1],114:[2,85],185:[2,113],186:[2,114],187:[2,115],188:[2,116],189:[2,117],190:[2,118],191:[2,119],202:[2,25],217:[2,31],230:[2,93],247:[2,83],248:[2,86],249:[2,87],252:[2,91],258:[2,29],263:[2,32],265:[2,98],275:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías

const {Types} = require('../Classes/Utils/Types')

//Expresiones
const {Primitive} = require('../Classes/Expressions/Primitive')
const {Arithmetic} = require('../Classes/Expressions/Arithmetic')
const {Logic} = require('../Classes/Expressions/Logic')
const {Relational} = require('../Classes/Expressions/Relational')
const {Cast} = require('../Classes/Expressions/Cast')
const {IncrDecr} = require('../Classes/Expressions/IncrDecr')
const {Ternary} = require('../Classes/Expressions/Ternary')
const {AccessID} = require('../Classes/Expressions/AccessID')

const {InitID} = require('../Classes/Instructions/InitID')
const {AsignID} = require('../Classes/Instructions/AsignID')
const {Print} = require('../Classes/Instructions/Print')
const {InitArray} = require('../Classes/Instructions/InitArray')
const {InitMatrix} = require('../Classes/Instructions/InitMatrix')
const {While} = require('../Classes/Instructions/While')
const {DoWhile} = require('../Classes/Instructions/DoWhile')
const {For} = require('../Classes/Instructions/For')
const {Block} = require('../Classes/Instructions/Block')
const {If} = require('../Classes/Instructions/If')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1://ignora saltos de línea
break;
case 2://ignora tabulaciones
break;
case 3:
break;
case 4:return 25;
break;
case 5:return 92;
break;
case 6:return 31;
break;
case 7:return 60;
break;
case 8:return 70;
break;
case 9:return 72;
break;
case 10:return 75;
break;
case 11:return 77;
break;
case 12:return 76;
break;
case 13:return 90;
break;
case 14:return 18;
break;
case 15:return 19;
break;
case 16:return 83;
break;
case 17:return 88;
break;
case 18:return 89;
break;
case 19:return 29;
break;
case 20:return 36;
break;
case 21:return 95;
break;
case 22:return 96;
break;
case 23:return 97;
break;
case 24:return 98;
break;
case 25:return 99;
break;
case 26:return 100;
break;
case 27:return 101;
break;
case 28:return 50;
break;
case 29:return 51;
break;
case 30:return 24;
break;
case 31:return 54;
break;
case 32:return 55;
break;
case 33:return 10;
break;
case 34:return 45;
break;
case 35:return 56;
break;
case 36:return 32;
break;
case 37:return 57;
break;
case 38:return 58;
break;
case 39:return 73;
break;
case 40:return 74;
break;
case 41:return 34;
break;
case 42:return 35;
break;
case 43:return 44;
break;
case 44:return 61;
break;
case 45:return 62;
break;
case 46:return 30;
break;
case 47:return 65;
break;
case 48:return 66;
break;
case 49:return 63;
break;
case 50:return 64;
break;
case 51:return 67;
break;
case 52:return 68;
break;
case 53:return 69;
break;
case 54:return 81;
break;
case 55:return 82;
break;
case 56:return 27;
break;
case 57:return 52;
break;
case 58:return 53;
break;
case 59:return 47;
break;
case 60:return 46;
break;
case 61:return 33;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 49; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 48; 
break;
case 64:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
case 65:return 5;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\n)/i,/^(?:[\r\t]+)/i,/^(?:\/\/.*)/i,/^(?:(int|double|char|string|bool))/i,/^(?:void\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:execute\b)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?::)/i,/^(?:%)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"(([^\n\"\\]?|\\.))*")/i,/^(?:'(([^\n\"\\]?|\\.))')/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}